networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  minio_data: {}
  thanos_sidecar_data: {}
  fuseki_data: {}
  fuseki_config: {}

services:
  fuseki:
    # Apache Jena Fuseki - RDF Database and SPARQL Endpoint
    image: stain/jena-fuseki:latest
    container_name: fuseki
    restart: unless-stopped
    environment:
      - FUSEKI_DATASET_1=my_dataset # Creates a persistent dataset with this name
      # Optional: Set admin password for the web UI
      - ADMIN_PASSWORD=admin123
    volumes:
      - fuseki_data:/fuseki-base/databases # Persistent volume for database files
      - fuseki_config:/fuseki-base/configuration # Persistent volume for config
    ports:
      - "3030:3030" # Exposes the Fuseki web UI and SPARQL endpoint
    networks:
      - monitoring # Attach it to the same network so Prometheus can scrape it
    # Optional: Healthcheck to ensure the service is fully started
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3030/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
  # The monitoring backbone: time-series database
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle" # Allows config reload via API call
      - "--storage.tsdb.min-block-duration=2h"
      - "--storage.tsdb.max-block-duration=2h"
    volumes:
      - ./ops/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring

  node-exporter:
  # Exposes hardware & OS metrics from the host
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    # REMOVED the complex volumes and command
    ports:
      - "9100:9100"
    networks:
      - monitoring
    # ADD these lines to run with necessary Linux capabilities
    privileged: true
    pid: "host"
    command:
      - "--path.rootfs=/host"
    volumes:
      - /:/host:ro

  thanos-sidecar:
  # THANOS SIDECAR - Attaches to Prometheus and uploads data to MinIO
    image: quay.io/thanos/thanos:v0.39.2
    container_name: thanos-sidecar
    user: "65534"
    restart: unless-stopped
    command:
      - sidecar
      - --prometheus.url=http://prometheus:9090
      - --tsdb.path=/prometheus
      - --objstore.config-file=/etc/thanos/minio-bucket.yaml
    volumes:
      - prometheus_data:/prometheus
      - ./ops/thanos/thanos-config.yaml:/etc/thanos/minio-bucket.yaml:ro
    depends_on:
      - prometheus
      - minio
    networks:
      - monitoring

  thanos-querier:
  # THANOS QUERIER - Single endpoint for Grafana to query Prometheus + MinIO
    image: quay.io/thanos/thanos:v0.39.2
    container_name: thanos-querier
    restart: unless-stopped
    command:
      - query
      - --http-address=0.0.0.0:10902
      - --grpc-address=0.0.0.0:10901
      - --endpoint=thanos-sidecar:10901
      - --endpoint=thanos-storegateway:10901
    ports:
      - "10902:10902" # Expose the HTTP Query UI and API
    depends_on:
      - thanos-sidecar
    networks:
      - monitoring

  thanos-storegateway:
  # THANOS STOREGATEWAY - Serves metrics from the blocks in MinIO (long-term storage)
    image: quay.io/thanos/thanos:v0.39.2
    container_name: thanos-storegateway
    restart: unless-stopped
    command:
      - store
      - --http-address=0.0.0.0:10909
      - --grpc-address=0.0.0.0:10908
      - --objstore.config-file=/etc/thanos/minio-bucket.yaml
    volumes:
      - ./ops/thanos/thanos-config.yaml:/etc/thanos/minio-bucket.yaml:ro
    depends_on:
      - minio
    networks:
      - monitoring

  grafana:
  # The visualization dashboard
    image: grafana/grafana-enterprise:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_PROTOCOL=http1
      - GF_INSTALL_PLUGINS=grafana-polystat-panel # Optional: useful for advanced panels
    volumes:
      - grafana_data:/var/lib/grafana
  - ./ops/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
  - ./ops/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3001:3000" # Map host port 3001 to container port 3000
    networks:
      - monitoring

  minio:
  # Local S3-compatible storage for the next phase (Thanos)
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin # Change these for real deployment!
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000" # S3 API Port
      - "9001:9001" # Web UI Port
    networks:
      - monitoring
