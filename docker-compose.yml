networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana_data: {}
  minio_data: {}
  thanos_sidecar_data: {}
  thanos_store_data: {}
  fuseki_data: {}
  fuseki_config: {}

services:
  # Apache Jena Fuseki - RDF Database and SPARQL Endpoint
  fuseki:
    image: stain/jena-fuseki:latest
    container_name: fuseki
    restart: unless-stopped
    environment:
      - FUSEKI_DATASET_1=my_dataset # Creates a persistent dataset with this name
      # Optional: Set admin password for the web UI
      - ADMIN_PASSWORD=admin123
    volumes:
      - fuseki_data:/fuseki-base/databases # Persistent volume for database files
      - fuseki_config:/fuseki-base/configuration # Persistent volume for config
    ports:
      - "43030:3030" # Exposes the Fuseki web UI and SPARQL endpoint
    networks:
      - monitoring # Attach it to the same network so Prometheus can scrape it
    # Optional: Healthcheck to ensure the service is fully started
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3030/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # The monitoring backbone: time-series database
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/config/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle # Allows config reload via API call
      - --storage.tsdb.min-block-duration=1m
      - --storage.tsdb.max-block-duration=1m
    volumes:
      - ./ops/prometheus:/config/prometheus:ro
      - prometheus_data:/prometheus
    ports:
      - "44090:9090"
    networks:
      - monitoring

  # Exposes hardware & OS metrics from the host
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    # REMOVED the complex volumes and command
    ports:
      - "49100:9100"
    networks:
      - monitoring
    # ADD these lines to run with necessary Linux capabilities
    privileged: true
    pid: "host"
    command:
      - "--path.rootfs=/host"
    volumes:
      - /:/host:ro

  # THANOS SIDECAR - Attaches to Prometheus and uploads data to MinIO
  thanos-sidecar:
    image: quay.io/thanos/thanos:v0.39.2
    container_name: thanos-sidecar
    user: "65534"
    restart: unless-stopped
    command:
      - sidecar
      - --prometheus.url=http://prometheus:9090
      - --tsdb.path=/prometheus
      - --objstore.config-file=/config/thanos/thanos-config.yaml
    volumes:
      - prometheus_data:/prometheus
      - ./ops/thanos:/config/thanos:ro
    depends_on:
      - prometheus
      - minio
    networks:
      - monitoring

  # THANOS QUERIER - The single endpoint for Grafana to query all data (Prometheus + MinIO)
  thanos-querier:
    image: quay.io/thanos/thanos:v0.39.2
    container_name: thanos-querier
    restart: unless-stopped
    command:
      - query
      - --http-address=0.0.0.0:10902
      - --grpc-address=0.0.0.0:10901
      - --endpoint=thanos-sidecar:10901
      - --endpoint=thanos-storegateway:10901
    ports:
      - "45002:10902" # Expose the HTTP Query UI and API
    depends_on:
      - thanos-sidecar
    networks:
      - monitoring

  # THANOS STOREGATEWAY - Serves metrics from the blocks in MinIO (long-term storage)
  thanos-storegateway:
    image: quay.io/thanos/thanos:v0.39.2
    container_name: thanos-storegateway
    user: "0"
    restart: unless-stopped
    command:
      - store
      - --http-address=0.0.0.0:10902
      - --grpc-address=0.0.0.0:10901
      - --data-dir=/var/thanos
      - --objstore.config-file=/config/thanos/thanos-config.yaml
    volumes:
      - ./ops/thanos:/config/thanos:ro
      - thanos_store_data:/var/thanos
    depends_on:
      - minio
    networks:
      - monitoring

  # THANOS COMPACTOR - Compacts and downsamples blocks in object storage (dev: minimal)
  thanos-compactor:
    image: quay.io/thanos/thanos:v0.39.2
    container_name: thanos-compactor
    user: "0"
    restart: unless-stopped
    command:
      - compact
      - --objstore.config-file=/config/thanos/thanos-config.yaml
      - --wait
      - --http-address=0.0.0.0:10903
      - --data-dir=/var/thanos/compactor
    volumes:
      - ./ops/thanos:/config/thanos:ro
      - thanos_store_data:/var/thanos
    depends_on:
      - minio
    networks:
      - monitoring

  # The visualization dashboard
  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_PROTOCOL=http1
      - GF_INSTALL_PLUGINS=grafana-polystat-panel # Optional: useful for advanced panels
      - GF_PATHS_PROVISIONING=/provisioning
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/provisioning:/provisioning:ro
      - ./ops/grafana/dashboards:/dashboards:ro
    ports:
      - "43001:3000" # Map host port 43001 to container port 3000
    networks:
      - monitoring

  # Local S3-compatible storage for the next phase (Thanos)
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin # Change these for real deployment!
    volumes:
      - minio_data:/data
    ports:
      - "49000:9000" # S3 API Port
      - "49001:9001" # Web UI Port
    networks:
      - monitoring

  # Local reverse proxy for pretty hostnames
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./ops/certs:/certs:ro
    depends_on:
      - grafana
      - prometheus
      - thanos-querier
      - fuseki
      - minio
    networks:
      - monitoring
