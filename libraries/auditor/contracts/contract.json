{
	"version": "1.0.0",
	"lastUpdated": "2025-01-11",
	"library": "auditor",
	"purpose": "Revolutionary test generator achieving 100% coverage automatically. Generates comprehensive test suites from Arborist output.",
	"api": {
		"exports": [
			{
				"name": "generateTests",
				"signature": "(input: ContractOutput<ParsedProject>) => TestSuite",
				"description": "Generate comprehensive tests for an entire project from Arborist output"
			},
			{
				"name": "generateFileTests",
				"signature": "(input: ContractOutput<ParsedFile>) => FileTestSuite",
				"description": "Generate tests for a single file from Arborist output"
			},
			{
				"name": "generatePropertyTests",
				"signature": "(input: ContractOutput<ParsedFunction>, properties: PropertySpec[]) => PropertyTestSuite",
				"description": "Generate property-based tests for a function"
			},
			{
				"name": "analyzeCoverage",
				"signature": "(input: ContractOutput<ParsedFile>) => CoverageReport",
				"description": "Analyze code paths and branch coverage requirements"
			}
		],
		"types": [
			{
				"name": "TestSuite",
				"description": "Complete test suite for a project",
				"fields": [
					"projectName: string",
					"files: Map<string, FileTestSuite>",
					"coverage: CoverageReport",
					"propertyTests: PropertyTestSuite[]",
					"timestamp: number"
				]
			},
			{
				"name": "FileTestSuite",
				"description": "Test suite for a single file",
				"fields": [
					"filePath: string",
					"unitTests: UnitTest[]",
					"propertyTests: PropertyTest[]",
					"edgeCases: EdgeCaseTest[]",
					"coverage: FileCoverage"
				]
			},
			{
				"name": "PropertyTest",
				"description": "Property-based test definition",
				"fields": [
					"property: string",
					"description: string",
					"generator: GeneratorSpec",
					"predicate: string",
					"numTests: number"
				]
			},
			{
				"name": "CoverageReport",
				"description": "Coverage analysis for code",
				"fields": [
					"branches: BranchCoverage[]",
					"lines: LineCoverage[]",
					"functions: FunctionCoverage[]",
					"percentage: number",
					"uncoveredPaths: CodePath[]"
				],
				"note": "Auditor ensures 100% coverage or explicit ignores with reasons"
			}
		]
	},
	"responsibilities": {
		"owns": [
			"Test generation logic",
			"Property-based testing strategies",
			"Coverage analysis and validation",
			"Edge case detection",
			"Test optimization",
			"Algebraic law verification"
		],
		"consumes": [
			"Arborist's ContractOutput only",
			"AST data from Arborist",
			"Type information from Arborist",
			"Function signatures from Arborist",
			"Quarrier's generated test data"
		],
		"forbidden": [
			"Parsing TypeScript/JSX directly",
			"Using TypeScript compiler",
			"Using ts-morph",
			"Reading source files for parsing",
			"Modifying Arborist's output",
			"Generating documentation",
			"Making network requests"
		]
	},
	"implementation": {
		"allowed": [
			"Import from @sitebender/arborist/exports/types",
			"Import from @sitebender/quarrier/exports",
			"Generate test code",
			"Analyze AST for branches",
			"Detect mathematical properties"
		],
		"forbidden": [
			"Import TypeScript compiler",
			"Import ts-morph",
			"Import from @sitebender/arborist/internal",
			"Access .ts/.tsx files for parsing",
			"Generate documentation"
		]
	},
	"input": {
		"requirements": [
			"Must validate contract version",
			"Must check input.validate() before processing",
			"Must handle frozen/immutable data",
			"Must not attempt to modify input"
		],
		"validation": {
			"compile-time": [
				"TypeScript enforces ContractOutput type",
				"Cannot import from wrong paths"
			],
			"runtime": [
				"Contract version validation",
				"Input validation check",
				"Checksum verification"
			],
			"test-time": [
				"No forbidden imports",
				"No TypeScript parsing",
				"Contract compliance",
				"100% coverage achieved"
			]
		}
	},
	"dependencies": {
		"allowed": ["arborist", "quarrier"],
		"forbidden": [
			"envoy",
			"toolsmith",
			"architect",
			"artificer",
			"formulator",
			"agent"
		]
	},
	"goals": {
		"coverage": "100% or explicit ignore with reason",
		"properties": "Detect and verify algebraic laws",
		"automation": "Zero manual test writing"
	},
	"versioning": {
		"strategy": "semver",
		"breaking-changes": "Major version bump required",
		"deprecation": "One minor version warning before removal"
	}
}
