/**
 * Check if an edge case is covered by a property test
 */

import type { TestCase } from "../../../../types/index.ts"

/**
 * Determine if an edge case test is covered by a property test
 * @param edgeCase Edge case test
 * @param propertyTest Property test
 * @returns True if edge case is covered
 */
export default function isEdgeCaseCoveredByProperty(
	edgeCase: TestCase,
	propertyTest: TestCase,
): boolean {
	if (!propertyTest.properties) return false

	// Check if edge case input would be generated by property test
	const input = edgeCase.input[0]

	for (const prop of propertyTest.properties) {
		const generator = prop.generator

		// Empty array covered by fc.array
		if (
			Array.isArray(input) && input.length === 0 &&
			generator.includes("fc.array")
		) {
			return true
		}

		// Null/undefined covered by fc.option or fc.constantFrom
		if (
			(input === null || input === undefined) &&
			(generator.includes("fc.option") ||
				generator.includes("fc.constantFrom"))
		) {
			return true
		}

		// Zero covered by numeric generators
		if (
			input === 0 &&
			(generator.includes("fc.integer") ||
				generator.includes("fc.nat") ||
				generator.includes("fc.float"))
		) {
			return true
		}

		// Empty string covered by string generators
		if (input === "" && generator.includes("fc.string")) {
			return true
		}

		// Large numbers covered by fc.integer with appropriate bounds
		if (
			typeof input === "number" &&
			(input === Number.MAX_SAFE_INTEGER ||
				input === Number.MIN_SAFE_INTEGER) &&
			generator.includes("fc.integer")
		) {
			return true
		}
	}

	return false
}
