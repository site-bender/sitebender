================================================================================
BATCH 7 COLOR TYPES RESEARCH - FINAL SUMMARY
================================================================================

RESEARCH COMPLETED: 2025-11-01
LOCATION: Toolsmith newtype implementation research

================================================================================
DELIVERABLES CREATED
================================================================================

1. BATCH_7_RESEARCH.md (Comprehensive Reference)
   - Complete implementation patterns from Batch 6 string types
   - ValidationError structure and philosophy
   - Checklist requirements for HexColor, OklchColor, P3Color
   - Regex patterns and validation logic
   - File paths and organizational structure
   - Constitutional rules and constraints

2. BATCH_7_QUICK_REFERENCE.md (Implementation Guide)
   - At-a-glance summary of what you're building
   - File structure per color type
   - Step-by-step implementation workflow
   - Validation patterns with examples
   - Error code reference
   - Testing checklist

3. BATCH_7_FILE_STRUCTURE.md (Ready-to-Use Code)
   - Complete directory structure
   - Ready-to-use code templates for all 27 files
   - HexColor implementation (5 files)
   - OklchColor implementation (5 files)
   - P3Color implementation (5 files)
   - Type definitions and documentation

================================================================================
KEY FINDINGS
================================================================================

REFERENCE IMPLEMENTATIONS (Batch 6 - COMPLETED):
- NonEmptyString: /libraries/toolsmith/src/newtypes/stringTypes/nonEmptyString/
- Char:           /libraries/toolsmith/src/newtypes/stringTypes/char/
- Base58:         /libraries/toolsmith/src/newtypes/stringTypes/base58/

PATTERN: Each type has identical folder structure
  - index.ts (smart constructor with validation)
  - index.test.ts (comprehensive tests)
  - unsafe[TypeName]/index.ts (unsafe constructor)
  - unwrap[TypeName]/index.ts (extract raw value)

VALIDATION APPROACH:
- All validation in smart constructor
- Returns Result<ValidationError, BrandedType>
- Predicates reuse validation logic for type narrowing
- Regex patterns with comments explaining [EXCEPTION] usage

ERROR STRUCTURE (ValidationError):
- code: SCREAMING_SNAKE_CASE (e.g., "HEX_COLOR_INVALID_FORMAT")
- field: camelCase (e.g., "hexColor")
- messages: Human-readable explanations
- received: What was provided
- expected: What system needs
- suggestion: Actionable guidance to fix
- examples: Valid examples (optional)
- constraints: Value ranges (optional)
- severity: "requirement" for all validation errors

================================================================================
BATCH 7 SPECIFICATIONS
================================================================================

HEXCOLOR:
- Format: #RGB or #RRGGBB (3 or 6 hexadecimal digits)
- Validation: Regex: ^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$
- Normalization: Lowercase
- Examples: #fff, #ffffff, #abc123, #f0f0f0
- Error codes: HEX_COLOR_EMPTY, HEX_COLOR_INVALID_FORMAT

OKLCHCOLOR:
- Format: oklch(L C H) or oklch(L C H / A)
- L (Lightness): 0-1 or 0%-100%
- C (Chroma): 0-1 (unitless)
- H (Hue): 0-360 degrees
- A (Alpha): 0-1 (optional)
- Validation: Regex + value range checking
- Normalization: Lowercase function name
- Examples: oklch(0.5 0.1 120), oklch(50% 0.1 120), oklch(0.5 0.1 120 / 0.8)
- Error codes: OKLCH_COLOR_EMPTY, OKLCH_COLOR_INVALID_FORMAT, 
  OKLCH_COLOR_INVALID_LIGHTNESS, OKLCH_COLOR_INVALID_CHROMA,
  OKLCH_COLOR_INVALID_HUE, OKLCH_COLOR_INVALID_ALPHA

P3COLOR:
- Format: color(display-p3 R G B) or color(display-p3 R G B / A)
- R, G, B: 0-1 or 0%-100%
- A (Alpha): 0-1 (optional)
- Validation: Regex + value range checking
- Normalization: Lowercase function name and color space
- Examples: color(display-p3 1 0 0), color(display-p3 100% 0% 0%), 
  color(display-p3 1 0 0 / 0.8)
- Error codes: P3_COLOR_EMPTY, P3_COLOR_INVALID_FORMAT,
  P3_COLOR_INVALID_RED, P3_COLOR_INVALID_GREEN, P3_COLOR_INVALID_BLUE,
  P3_COLOR_INVALID_ALPHA

================================================================================
FILES TO CREATE (27 TOTAL)
================================================================================

HEXCOLOR (9 files):
  src/newtypes/stringTypes/hexColor/
    - index.ts
    - index.test.ts
    - unsafeHexColor/index.ts
    - unwrapHexColor/index.ts
  src/predicates/isHexColor/
    - index.ts
    - index.test.ts (optional)

OKLCHCOLOR (9 files):
  src/newtypes/stringTypes/oklchColor/
    - index.ts
    - index.test.ts
    - unsafeOklchColor/index.ts
    - unwrapOklchColor/index.ts
  src/predicates/isOklchColor/
    - index.ts
    - index.test.ts (optional)

P3COLOR (9 files):
  src/newtypes/stringTypes/p3Color/
    - index.ts
    - index.test.ts
    - unsafeP3Color/index.ts
    - unwrapP3Color/index.ts
  src/predicates/isP3Color/
    - index.ts
    - index.test.ts (optional)

UPDATES TO EXISTING FILES (1):
  src/types/branded/index.ts
    - Add 3 type definitions (after line 93)

DOCUMENTATION:
  docs/NEWTYPES_IMPLEMENTATION_CHECKLIST.md
    - Update Batch 7 section with completion status

================================================================================
IMPLEMENTATION STRATEGY
================================================================================

Step 1: Add Type Definitions
  - Update src/types/branded/index.ts with HexColor, OklchColor, P3Color

Step 2: Create Smart Constructors (Main Logic)
  - Validates input using regex and range checking
  - Returns Result<ValidationError, ColorType>
  - Normalizes values (lowercase)
  - Calls unsafeConstructor with normalized value

Step 3: Create Unsafe Constructors
  - Simple type cast: value as ColorType
  - No validation, used internally after validation

Step 4: Create Unwrap Functions
  - Extract raw string value from branded type
  - Reverse of smart constructor

Step 5: Create Type Predicates
  - Return type: value is ColorType
  - Reuse validation logic from smart constructor
  - Used for runtime type narrowing

Step 6: Write Tests
  - Valid cases (multiple examples per type)
  - Invalid format cases
  - Edge cases (empty, malformed)
  - Range validation cases
  - Normalization verification

================================================================================
CONSTITUTIONAL RULES TO FOLLOW
================================================================================

1. NO CLASSES - Use pure functions only
2. NO MUTATIONS - All data immutable (const, Readonly<T>)
3. NO LOOPS - Use map/filter/reduce from Toolsmith
4. NO EXCEPTIONS - Return Result<ValidationError, T> instead of throw
5. ONE FUNCTION PER FILE - Single export per file
6. PURE FUNCTIONS - No side effects (except at IO boundaries)
7. NAMED FUNCTIONS ONLY - Never use arrow function syntax
8. ALL FUNCTIONS CURRIED - Each function takes ONE parameter

ERROR PHILOSOPHY:
- Help, don't scold
- Explain system limitations with actionable guidance
- Provide specific suggestions to fix problems
- Include valid examples when helpful

================================================================================
TESTING REQUIREMENTS
================================================================================

PER COLOR TYPE:
  - Valid cases (multiple examples)
  - Empty/null handling
  - Invalid format cases
  - Value range violations (OklchColor, P3Color)
  - Case normalization
  - Whitespace handling (OklchColor, P3Color)
  - Property-based tests (where appropriate)

Test framework: Deno + @std/assert
Property testing: fast-check library

================================================================================
REFERENCE FILES
================================================================================

Batch 6 Implementation Examples:
  /libraries/toolsmith/src/newtypes/stringTypes/base58/index.ts
  /libraries/toolsmith/src/newtypes/stringTypes/char/index.ts
  /libraries/toolsmith/src/newtypes/stringTypes/nonEmptyString/index.ts
  /libraries/toolsmith/src/predicates/isBase58/index.ts
  /libraries/toolsmith/src/predicates/isPhoneNumber/index.ts (regex example)

Type Definitions:
  /libraries/toolsmith/src/types/branded/index.ts

ValidationError Structure:
  /libraries/toolsmith/src/types/fp/validation/index.ts

Checklist:
  /libraries/toolsmith/docs/NEWTYPES_IMPLEMENTATION_CHECKLIST.md
  (Batch 7 section at lines 458-491)

================================================================================
READY TO IMPLEMENT
================================================================================

All three research documents are complete and ready:
1. BATCH_7_RESEARCH.md - Comprehensive reference guide
2. BATCH_7_QUICK_REFERENCE.md - Implementation workflow guide
3. BATCH_7_FILE_STRUCTURE.md - Ready-to-use code templates

Proceed to implementation phase with:
- Copy code from BATCH_7_FILE_STRUCTURE.md
- Follow patterns from BATCH_7_QUICK_REFERENCE.md
- Reference details from BATCH_7_RESEARCH.md
- Verify against constitutional rules
- Run tests: deno test src/newtypes/ --quiet

================================================================================
