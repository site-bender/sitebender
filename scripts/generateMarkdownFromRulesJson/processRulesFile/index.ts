import type { RulesFile } from "../types/index.ts"

import concat from "../../../libraries/toolsmith/src/vanilla/string/concat/index.ts"
import replace from "../../../libraries/toolsmith/src/vanilla/string/replace/index.ts"
import determineDocumentTitle from "../determineDocumentTitle/index.ts"
import parseJsonToMarkdown from "../parseJsonToMarkdown/index.ts"

const PROJECT_ROOT = new URL("../../..", import.meta.url).pathname

//++ Processes a single rules file, converting JSON to markdown
export default function processRulesFile(rulesFile: RulesFile): void {
	const jsonContent = Deno.readTextFileSync(rulesFile.jsonPath)
	const rulesData = JSON.parse(jsonContent)

	const title = determineDocumentTitle(rulesFile.jsonPath)
	const relativePath = replace(PROJECT_ROOT)("")(rulesFile.jsonPath)
	const cleanPath = replace(/^\//)("")(relativePath)

	const header = concat(`# ${title}

> **GENERATED FILE - DO NOT EDIT**
>
> This file is automatically generated from \`${cleanPath}\`.
> To make changes, edit the JSON file and run \`deno task generate-rules\`.

`)("")

	const content = parseJsonToMarkdown(rulesData)

	const footer = concat(`
---

**Generated from**: \`${cleanPath}\`
**Generated on**: ${new Date().toISOString()}
`)("")

	const fullDocument = concat(header)(concat(content)(footer))

	Deno.writeTextFileSync(rulesFile.markdownPath, fullDocument)

	const cleanMarkdownPath = replace(PROJECT_ROOT)("")(rulesFile.markdownPath)
	const cleanMdPath = replace(/^\//)("")(cleanMarkdownPath)

	console.log(concat("âœ… Generated ")(cleanMdPath))

	if (rulesData.version) {
		console.log(concat("   Version: ")(rulesData.version))
	}
}

//?? [EXAMPLE]
// processRulesFile({path: "...", jsonPath: "...", markdownPath: "..."})
// Reads JSON, converts to markdown, writes file
