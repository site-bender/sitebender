{
	// Workspace configuration for the Sitebender monorepo
	"workspace": [
		"./docs",
		"./jexer",
		"./libraries/*"
	],

	"tasks": {
		// === Formatting and Code Quality ===
		"fmt": "deno task sort && deno fmt",
		"fmt:all": "deno task sort:all && deno fmt libraries/ docs/ scripts/",
		"fmt:check": "deno fmt --check libraries/ docs/ scripts/",
		"lint": "deno lint libraries/ docs/ scripts/",
		"lint:all": "deno lint libraries/ docs/ scripts/",
		"fp:check": "deno run --allow-read --allow-run scripts/enforceFP/index.ts",
		"fp:adaptive": "deno run --allow-read --allow-run scripts/enforceFP/index.ts 'libraries/adaptive/src/**/*.ts' 'libraries/adaptive/src/**/*.tsx'",
		"fp:components": "deno run --allow-read --allow-run scripts/enforceFP/index.ts 'libraries/components/src/**/*.ts' 'libraries/components/src/**/*.tsx'",
		"fp:toolkit": "deno run --allow-read --allow-run scripts/enforceFP/index.ts 'libraries/toolkit/src/**/*.ts' 'libraries/toolkit/src/**/*.tsx'",
		"fp:pedantic": "deno run --allow-read --allow-run scripts/enforceFP/index.ts --pedantic 'libraries/*/src/**/*.ts' 'libraries/*/src/**/*.tsx'",

		// === Testing ===
		"test:adaptive": "deno test --unstable-temporal --no-check 'libraries/adaptive/tests/**/*.test.ts'",
		"test:adaptive:strict": "deno test --unstable-temporal 'libraries/adaptive/tests/**/*.test.ts'",
		"test:components": "deno test --unstable-temporal --no-check 'libraries/components/tests/**/*.test.ts'",
		"test:components:strict": "deno test --unstable-temporal 'libraries/components/tests/**/*.test.ts'",
		"test:toolkit": "deno test --unstable-temporal --no-check 'libraries/toolkit/tests/**/*.test.ts'",
		"test:docs:strict": "deno task --cwd docs test:build",
		"test:adaptive:cov": "deno test --unstable-temporal --no-check 'libraries/adaptive/tests/**/*.test.ts' --coverage=libraries/adaptive/coverage && deno coverage coverage",
		"test:components:cov": "deno test --unstable-temporal --no-check 'libraries/components/tests/**/*.test.ts' --coverage=libraries/components/coverage && deno coverage coverage",
		"test:toolkit:cov": "deno test --unstable-temporal --no-check 'libraries/toolkit/tests/**/*.test.ts' --coverage=libraries/toolkit/coverage && deno coverage coverage --lcov > coverage.lcov",
		"test:toolkit:strict": "deno test --unstable-temporal 'libraries/toolkit/tests/**/*.test.ts'",
		"test:jexer:strict": "deno test --unstable-temporal --allow-env --allow-read --config jexer/deno.json 'jexer/**/*.test.ts'",

		// === Type Checking ===
		"type-check": "deno check --unstable-temporal docs/src/**/*.ts docs/src/**/*.tsx scripts/**/*.ts libraries/adaptive/src/**/*.ts libraries/adaptive/src/**/*.tsx libraries/components/src/**/*.ts libraries/components/src/**/*.tsx",
		"type-check:focused": "deno check --unstable-temporal libraries/adaptive/src/operations/comparators/compare/index.ts libraries/adaptive/src/operations/comparators/amount/isLessThan/index.ts libraries/adaptive/src/operations/comparators/amount/isMoreThan/index.ts libraries/adaptive/src/operations/comparators/amount/isNoLessThan/index.ts libraries/adaptive/src/operations/comparators/equality/isEqualTo/index.ts libraries/adaptive/src/operations/comparators/equality/isUnequalTo/index.ts libraries/adaptive/src/operations/comparators/length/isLength/index.ts libraries/adaptive/src/operations/comparators/length/isLongerThan/index.ts libraries/adaptive/src/operations/comparators/length/isShorterThan/index.ts libraries/adaptive/src/operations/comparators/length/isNoLongerThan/index.ts libraries/adaptive/src/operations/comparators/length/isNoShorterThan/index.ts libraries/adaptive/src/operations/comparators/length/isNotLength/index.ts libraries/adaptive/src/operations/comparators/length/isSameLength/index.ts",
		"type-check:jexer": "deno check --unstable-temporal --config jexer/deno.json 'jexer/src/**/*.ts'",

		// === Import Management ===
		"sort": "deno run --unstable-temporal --allow-all scripts/sortImports/index.ts",
		"sort:all": "deno task sort --dir=docs && deno task sort --dir=libraries/adaptive && deno task sort --dir=libraries/components && deno task sort --dir=libraries/toolkit",
		"lint:aliases": "deno run --allow-read scripts/enforceImports/aliasGuards.ts",

		// === Setup and Maintenance ===
		"setup": "deno run --unstable-temporal -A scripts/setup/index.ts",
		"clean": "deno run --unstable-temporal --allow-write scripts/clean/index.ts",
		"clean:all": "deno task clean && deno task --cwd docs clean",

		// === Development Shortcuts ===
		"dev": "deno task --cwd docs dev",
		"build": "deno task --cwd docs build",
		"build:full": "deno task --cwd docs build:full",

		// === Hooks ===
		"hooks:install": "deno run --allow-read --allow-run --allow-write scripts/hooks/install.ts",
		"lint:no-react-junk": "deno run --allow-read --allow-run scripts/enforceNoReactJunk/index.ts",

		// === Local Infra (Docker Compose) ===
		"infra:up": "docker compose up -d",
		"infra:down": "docker compose down -v",
		"infra:restart": "deno task infra:down && deno task infra:up",
		"infra:logs": "docker compose logs -f",
		"infra:ps": "docker compose ps",
		"infra:config": "docker compose config",
		"infra:grafana:reset": "rm -rf ./ops/grafana/provisioning/dashboards/* && deno task infra:restart",
		"infra:reload:prom": "curl -sf -X POST http://localhost:9090/-/reload || true"
	},


	// Shared compiler options for all workspace members
	"compilerOptions": {
		"jsx": "react",
		"jsxFactory": "createElement",
		"jsxFragmentFactory": "Fragment",
		"types": [
			"./docs/src/types/globals.d.ts",
			"./scripts/types/globals.d.ts",
			// Ensure components' JSX globals are visible during workspace checks
			"./libraries/components/types/globals.d.ts",
			"./libraries/components/types/JSX/jsx-runtime.d.ts",
			"./libraries/adaptive/src/rendering/types/globals.d.ts"
		],
		"strict": true,
		"checkJs": false,
		"lib": ["dom", "dom.asynciterable", "dom.iterable", "esnext", "deno.ns", "deno.window"]
	},

	"imports": {
		// Shared aliases for scripts that reference docs' app modules
		"~utilities/": "./docs/src/utilities/",
		"~components/": "./docs/src/components/",
		"~constants/": "./docs/src/constants/",
		"~routes/": "./docs/pages/",
		"~src/": "./docs/src/",
		"~static/": "./docs/assets/",
		"~tests/": "./docs/tests/",
		"~types/": "./docs/src/types/",
		"~scripts/": "./scripts/",
		// Std lib and testing libs for workspace type-checks
		"@std/expect": "jsr:@std/expect@^1.0.17",
		"@std/testing": "jsr:@std/testing@^1.0.15",
		"@std/testing/bdd": "jsr:@std/testing@^1.0.15/bdd",
		"fast-check": "https://esm.sh/fast-check@4.1.1",
		// Repo-local import guardrails to avoid deep brittle paths during refactors
		"@toolkit/": "./libraries/toolkit/src/",
		"@adaptiveTypes/": "./libraries/adaptive/types/",
		"@adaptiveSrc/": "./libraries/adaptive/src/"
	},

	// Shared formatting configuration
	"fmt": {
		"useTabs": true,
		"lineWidth": 80,
		"indentWidth": 2,
		"newLineKind": "lf",
		"semiColons": false,
		"singleQuote": false,
		"proseWrap": "preserve",
		"include": ["docs/", "jexer/", "libraries/", "scripts/"],
		"exclude": ["**/dist/", "**/temp/", "**/static/", "**/node_modules/", "**/coverage/"]
	},

	// Shared linting configuration
	"lint": {
		"include": ["docs/src/", "jexer/src/", "libraries/*/src/", "scripts/"],
		"exclude": ["**/dist/", "**/temp/", "**/static/", "**/node_modules/", "**/coverage/"],
		"rules": {
			"tags": ["recommended"],
			"include": [
				"ban-untagged-todo",
				"camelcase",
				"eqeqeq",
				"no-await-in-loop",
				"no-const-assign",
				"no-sparse-arrays",
				"no-throw-literal",
				"prefer-const"
			],
			"exclude": []
		}
	},

	// Node modules support for npm packages
	"nodeModulesDir": "auto",

	// No lock file for now (can be enabled later for reproducible builds)
	"lock": false,

	// Test configuration (workspace-wide defaults)
	"test": {
		"include": ["*/tests/", "libraries/*/tests/", "docs/tests/"],
		"exclude": ["**/node_modules/", "**/dist/", "**/coverage/", "**/fixtures/"]
	},

	// Guardrails: contributors note
	"sitebender_guardrails": {
		"policy": {
			"noNetNewErrorsPerStep": true,
			"smallBatches": true,
			"verifyAfterEvery3Edits": true,
			"preferAliases": ["@toolkit/", "@adaptiveTypes/", "@adaptiveSrc/"]
		},
		"notes": "Use aliases above during cleanup; replace deep relative imports. Keep changes surgical and re-check often."
	},

	"unstable": [
		"temporal"
	]
}
