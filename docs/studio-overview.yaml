studio:
  name: "@sitebender/studio"
  description: >
    Revolutionary web framework where everything is data. Applications compile to RDF triples,
    persist in semantic stores, distribute via CRDTs, and render directly to DOM. Zero runtime
    dependencies, pure functional programming, distributed by default. No migrations from legacy
    frameworks—this is for building the future, not patching the past.
  status: "production-ready for greenfield"
  philosophy: "The future doesn't need the past's mistakes"
  audience:
    primary: ["AI assistants", "designers", "data scientists", "hobbyists"]
    excluded:
      [
        "React migrants",
        "enterprise legacy",
        "class advocates",
        "technical debt tolerators",
      ]
  achievements:
    - Applications as data: Complete implementation
    - Distributed by default: CRDTs, P2P, offline-first working
    - Cryptographic governance: Warden enforces architecture
    - Mathematical verification: Auditor proves correctness
    - Zero dependencies: Only Arborist uses deno_ast (which uses SWC internally)
    - Declarative testing: Tests are data in triple store
  constraints:
    runtime: ["Deno only", "TypeScript", "pure ESM", "no bundling", "no Node"]
    authoring: ["plain JSX", "no React", "no VDOM", "direct DOM manipulation"]
    dependencies:
      zero_runtime: true
      exception: "Arborist uses deno_ast (which uses SWC internally) for 20-50x performance improvements"
    governance:
      warden_enforced: true
      cryptographic_contracts: true
      ai_safe: true
    privacy:
      underscore_private: true
      no_escape_hatches: true
      boundary_enforcement: "cryptographic"
    imports:
      direct_tree_only: true
      no_barrel_files: true
      no_re_exports: true
    code_style:
      one_function_per_file: true
      named_functions_only: true
      pure_functional: true
      no_classes: true
      no_mutations: true
      no_loops: true

data_model:
  single_source_of_truth: "triple_store"
  canonical_semantics: ["SHACL", "OWL2"]
  persistence_formats: ["JSON", "YAML", "TOML", "Turtle"]
  distribution_strategy:
    primary: "IPFS + IPLD"
    rationale: "Content-addressed triples with natural deduplication and P2P distribution"
    benefits:
      - "Each triple becomes content-addressed and immutable"
      - "Natural versioning through IPFS hashes"
      - "Distributed by default, no single point of failure"
      - "Debugging sessions shareable via IPFS hashes"
      - "Computation behaviors tradeable as verified content"
  event_sourcing:
    pattern: "Store triples as immutable events"
    benefits:
      - "Natural time-travel debugging"
      - "Perfect audit trail"
      - "CRDT-like conflict resolution"
      - "Distributed replication friendly"
  notes:
    - Validation constraints (e.g., regex facets) live in SHACL/OWL2
    - Whole applications may be stored in the triple store
    - Event sourcing enables perfect state reconstruction

authoring_and_rendering_flow:
  steps:
    - "JSX -> IR (internal only; visible in the-workshop for debugging)"
    - "IR -> persisted artifacts (JSON/YAML/TOML/Turtle)"
    - "architect.render(JSON) -> DOM (no VDOM)"
  ir_visibility:
    external: false
    exceptions:
      ["applications/the-workshop (the-workshop) for visualization/debugging"]
  renderer_input_format: "JSON"

architect_runtime:
  build_pipeline:
    entry: "libraries/architect/src/rendering/buildDomTree/index.ts"
    behavior: "Creates elements, attaches behaviors (calculation/format/validation), appends children"
    special_cases:
      - tag: "Fragment"
        handler: "handleFragment"
      - tag: "TextNode"
        handler: "appendTextNode"
      - tag: "Hn"
        handler: "setLevel -> creates H{level}"
    attributes_and_dataset:
      attributes: "addAttributes(elem)(attributes)"
      dataset: "addDataAttributes(elem)(dataset)"
  dom_attachment:
    element_self_input_tags: ["DATA", "INPUT", "SELECT", "TEXTAREA"]
    dataset_keys:
      calculation: "element.dataset.calculation = JSON.stringify(calculation)"
      format: "element.dataset.format = JSON.stringify(fmt)"
    properties:
      - name: "__sbCalculate"
        defined_in: "libraries/architect/src/rendering/buildDomTree/addCalculation/index.ts"
        signature: "(arg?: unknown, localValues?: LocalValues) => Promise<Either<Error[], unknown>>"
        behavior:
          - "Composes operators via composeOperators(Operand)"
          - "Reads input from .value (INPUT/SELECT/TEXTAREA/DATA) else innerHTML"
          - "Writes output back to .value or innerHTML"
          - "Dispatches InputEvent('input', { bubbles: true })"
        registries:
          - "document.__sbCalculators: Set<elementId>"
          - "document.__sbCalculations[selector]: Set<elementId>"
      - name: "__sbFormat"
        defined_in: "libraries/architect/src/rendering/buildDomTree/addFormatter/index.ts"
        signature: "(arg?: unknown, localValues?: Record<string, unknown>) => Promise<unknown>"
        behavior:
          - "Uses formatter(fmtTag) to construct async format fn"
          - "Returns formatted value; does not write back"
        registries:
          - "document.__sbFormatters: Set<elementId>"
          - "document.__sbFormatted[selector]: Set<elementId>"
      - name: "__sbValidate"
        defined_in: "libraries/architect/src/rendering/buildDomTree/addValidation/index.ts"
        signature: "(arg: unknown, localValues?: LocalValues) => Promise<Either<ArchitectError[], boolean>>"
        behavior:
          - "Lazily composes on first call via composeValidator(Comparator|Logical|Operand)"
          - "Normalizes Right to boolean"
        registries: []
    globals:
      - "document.__sbCalculators"
      - "document.__sbCalculations"
      - "document.__sbFormatters"
      - "document.__sbFormatted"
    event_dispatch:
      - type: "InputEvent"
        options: { bubbles: true, view: "window" }
  ssr_and_ir:
    embed_ir_helper: "libraries/architect/src/rendering/embedIr.ts"
    ssr_renderer: "libraries/architect/src/rendering/index.ts (minimal for tests)"
    hydration_strategy: "TBD (no VDOM)"

accessibility:
  enforcement:
    tool: "axe"
    ci_policy:
      alpha: "warn"
      pre_production: "hard_fail"
  pagewright:
    enforce_semantic_html: true
    aria_rules: "enforced via allowlists; stabilizes before production"

governance_and_warden:
  purpose: "Cryptographically enforced architectural governance, especially AI-safety"
  contracts:
    hash: "SHA-256 hash-locked contracts"
    auditable_history: true
  privacy:
    underscore_folders: true
    import_validation: true
    nested_privacy: true
    escape_hatches: "none"
  enforcement_phases: ["pending", "warn", "block"]
  repo_policy:
    pr_branch: "warn"
    main_branch: "block"
  performance_targets:
    validation_suite_ms: 5000
    privacy_validation_ms: 1000
    contract_generation_ms: 2000
    zero_false_positives: true
  coding_standards:
    no_barrel_files: true
    direct_tree_imports_only: true
    one_function_per_file: true
    named_functions_only: true
    export_on_same_line: true
    privacy_convention:
      public_functions: "src/functionName/index.ts"
      private_helpers: "src/functionName/_helperName/index.ts"
      shared_private: "src/_sharedHelper/index.ts (only when src is lowest common ancestor)"
      no_generic_folders: "No 'utils' or 'helpers' buckets; helpers must be descriptive"
  references:
    readme: "libraries/warden/README.md"
    tasks_file: "libraries/warden/deno.jsonc"
    mod_ts_note: "mod.ts may exist as a warning-only file; no barrel usage"

dependencies_policy:
  zero_dependencies: true
  exception:
    library: "arborist"
    depends_on: "deno_ast (SWC parser)"
  notes:
    - "Testing and server-side infra may use dependencies as needed"
    - "deno_ast provides syntax-only parsing via SWC, delivering 20-50x performance improvements"

performance_benchmarks:
  arborist:
    small_files: "<10ms (10-50 functions)"
    medium_files: "<50ms (100-500 functions)"
    large_files: "<200ms (1000+ functions)"
    speedup: "20-50x performance improvement"
  envoy:
    ast_parsing: "<100ms typical (via Arborist)"
    doc_generation: "<1s for 1000 functions"
    sparql_queries: "<50ms typical queries"
    graph_traversal: "<10ms local connections"
  auditor:
    formal_verification: "TBD - Z3 theorem prover dependent"
    test_generation: "30+ tests per function in seconds"

browser_support:
  philosophy: "EVERYTHING WORKS EVERYWHERE - progressive enhancement"
  layers:
    layer_1: "Pure HTML (Lynx/Mosaic/Netscape 1.0 compatible)"
    layer_2: "CSS enhancement (graphical browsers)"
    layer_3: "JavaScript enhancement (modern features)"
  minimum_requirements:
    absolute_minimum: "HTML 2.0 (1995)"
    recommended: "CSS 2.1 (1998)"
    enhanced: "Modern browsers get full experience"

developer_experience:
  measurement_system: "Five-smiley feedback (😱😟😐😊🤩)"
  tracked_interactions:
    - "Error messages"
    - "Documentation quality"
    - "Build failures"
    - "Test output"
    - "Code reviews"
    - "AI suggestions"
  continuous_improvement: "Granular feedback drives development experience optimization"

declarative_testing:
  philosophy: "Testing is not separate from the application - it's part of the data model"
  approach: "JSX components define all IO boundaries, test scenarios, and verification"
  note: "NO MOCKING except MSW-style edge interception for IO boundaries (HTTP, file system, network). Test with real implementations and declarative scenario data."
  benefits:
    - "No contract drift - contracts enforced by production validation"
    - "Scenarios as data - shareable, versionable, tradeable"
    - "Formal verification - prove scenarios maintain invariants"
    - "Progressive enhancement - works without JS, enhanced with"
  distribution:
    agent: "IO edge interception (MSW-style), recording, replay, network simulation"
    architect: "Test response generation, scenario state, transformations"
    auditor: "Contract verification, coverage analysis, invariant proofs"
    custodian: "Stateful scenarios, time control, state machines"
    envoy: "Test observability, dashboards, contract drift detection"
    warden: "Production safety, test boundary enforcement"
    sentinel: "Test authentication/authorization policies"
    formulator: "Test scenario expressions, conditional logic for test data"
  coordination: "TestHarness meta-component orchestrates all test functionality"

libraries:
  - current: "@sitebender/toolsmith"
    studio_name: "Toolsmith"
    purpose: "Pure FP primitives/combinators; laws; absolutely pure"
    priority: "highest after Warden"
    status: "active - must complete and lock"
  - current: "@sitebender/pagewright"
    studio_name: "Pagewright"
    purpose: "Semantic authoring language - write what you're building, not how HTML works"
    revolutionary_features:
      context_aware_compilation: "Determines correct HTML structure from component nesting automatically"
      route_based_page_promotion: "Any component becomes full page when top-level in route (Contact vs ContactPage)"
      semantic_vocabulary: "Components for every conceivable use case (Essay, Recipe, Dialogue, Poem, etc.)"
      graceful_attribute_handling: "Unknown props become data-x- attributes, preserving all user intent"
      heading_hierarchy: "Automatic H1-H6 generation based on nesting context"
      element_substitution: "Line in Poem vs Line in Address vs Line in Dialogue - context determines output"
      user_friendly_props: "url instead of href, semantic prop names instead of HTML implementation details"
    status: "advanced (more complete than typical alpha)"
  - current: "@sitebender/architect"
    studio_name: "Architect"
    purpose: "Reactive core and render pipeline (JSX -> IR -> formats -> DOM); no VDOM"
    status: "advanced (more complete than typical alpha)"
  - current: "@sitebender/formulator"
    studio_name: "Formulator"
    purpose: "Expression parser to/from Architect IR; proper precedence; variables/functions"
    status: "independent; can proceed in parallel"
  - current: "@sitebender/operator"
    studio_name: "Operator"
    purpose: "CQRS event sourcing with events as RDF triples; multi-layer transport escalation; event-driven workflow orchestration"
    status: "independent; can proceed in parallel"
    features:
      - "Events stored as RDF triples, queryable via SPARQL"
      - "CQRS pattern: commands produce events, queries are nullipotent"
      - "Cryptographic ordering: hash chains + vector clocks (no blockchain)"
      - "Multi-layer transport escalation (DOM → BroadcastChannel → WebSocket → WebRTC → libp2p)"
      - "Event-driven workflow orchestration (visual n8n-style designer)"
      - "Declarative TSX components for all pub/sub"
      - "Automatic transport selection by scope"
      - "CRDT-based conflict resolution"
      - "Homomorphic event processing"
      - "Perfect replay and time-travel from immutable event log"
      - "Zero runtime dependencies"
  - current: "@sitebender/agent"
    studio_name: "Agent"
    purpose: "Distributed/hybrid adapters (CRDTs, DID/VC, IPFS, Solid); offline-first"
    status: "independent; can proceed in parallel"
  - current: "@sitebender/envoy"
    studio_name: "Envoy"
    purpose: "Revolutionary documentation and observability platform - living knowledge graph with visual workflow dashboard"
    automated_documentation_philosophy: "Most documentation generated automatically - manual comments only for what machines cannot derive"
    comment_syntax:
      description: "//++ (use sparingly - only when purpose unclear from name/signature)"
      help_examples: "//??  (discouraged - let Quarrier generate examples, Auditor find gotchas, Envoy analyze pros/cons)"
      tech_debt: "//-- with specific remediation plans"
      critical: "//!! blocking problems requiring human judgment"
      links: "//>> semantic connections to external resources"
    automated_capabilities:
      examples: "Quarrier generates comprehensive examples from property-based tests"
      gotchas: "Auditor discovers edge cases through formal verification"
      pros_cons: "Envoy analyzes from complexity, performance, mathematical properties"
      descriptions: "Often derivable from function names, parameter types, algorithm analysis"
    manual_comments_reserved_for:
      - "Business context machines cannot infer"
      - "Design decisions and rationale"
      - "Critical issues requiring human judgment"
      - "External references and links"
      - "Tech debt with specific remediation plans"
    features:
      visual_workflow_dashboard: "n8n-style workflow canvas powered by semantic triple store"
      advanced_debugging:
        - "Time-travel debugging with state reconstruction"
        - "Visual debugging with 3D code flow"
        - "Query-based debugging with SPARQL"
        - "Collaborative debugging sessions"
        - "Contract violation detection"
      developer_experience:
        - "Five-smiley feedback system (😱😟😐😊🤩)"
        - "Error message quality tracking"
        - "Onboarding speed measurement"
      progressive_enhancement:
        - "Layer 1: Pure HTML (Lynx/Mosaic compatible)"
        - "Layer 2: CSS enhancement"
        - "Layer 3: Modern JavaScript features"
      real_time_updates:
        - "HTTP/3 server push (best)"
        - "WebSocket fallback"
        - "Meta refresh baseline"
      automated_detection:
        mathematical_properties:
          [
            "purity",
            "commutativity",
            "associativity",
            "idempotence",
            "distributivity",
          ]
        code_characteristics:
          ["complexity", "currying", "type_safety", "dependencies"]
    status: "dependent on Quarrier + Arborist readiness"
  - current: "@sitebender/auditor"
    studio_name: "Auditor"
    purpose: "Formal verification system using Z3 theorem prover - proves mathematical correctness, doesn't just test"
    aspirational_coverage: "100%"
    features:
      formal_verification:
        - "Z3 theorem prover integration"
        - "SMT solving for property verification"
        - "Counterexample generation for failures"
        - "Mathematical law verification (associativity, commutativity, etc.)"
        - "Performance bound proofs (Big-O verification)"
        - "Termination proofs"
      integration:
        - "Direct IR verification from Architect"
        - "Complete AST analysis via Arborist"
        - "ALL test data generation via Quarrier"
    status: "dependent on Quarrier + Arborist readiness"
  - current: "@sitebender/arborist"
    studio_name: "Arborist"
    purpose: "TS/JSX parsing using deno_ast (SWC internally); THE ONLY library allowed to parse - all others use Arborist output"
    depends_on: "deno_ast (ONLY external dependency allowed in entire ecosystem)"
    status: "independent; can proceed in parallel"
    performance: "20-50x performance improvement"
    architectural_role: "Central parsing hub - Warden enforces parsing boundaries"
  - current: "@sitebender/quarrier"
    studio_name: "Quarrier"
    purpose: "Revolutionary property-based testing through compositional pipelines - zero dependencies, zero classes"
    advanced_features:
      bidirectional_generators: "Generate AND parse with same logic for round-trip testing"
      pipeline_paradigm: "Seed → Generate → Test → Shrink → Report"
      proof_carrying: "Properties carry formal correctness proofs"
      metamorphic_testing: "Properties derive other properties automatically"
      resumable_shrinking: "Pause and resume shrinking across sessions"
      effects_as_values: "Not IO monads, just data describing computations"
    status: "independent; can proceed in parallel"
  - current: "@sitebender/warden"
    studio_name: "Warden"
    purpose: "Architectural governance (contracts, privacy, imports); AI-safe"
    status: "highest priority; must be foolproof"
  - current: "@sitebender/steward"
    studio_name: "Steward"
    purpose: "Deterministic, non-configurable style/structure enforcer with safe autofixes; complements Warden"
    status: "alpha (spec + stubs)"
  - current: "@sitebender/custodian"
    studio_name: "Custodian"
    purpose: "Progressive state management with URL-as-state, cryptographic continuations, and visual state machine workflows"
    status: "independent; can proceed in parallel"
    features:
      - "Works without JavaScript, enhances with it (Lynx to modern browsers)"
      - "URL-as-state: complete UI state in query parameters"
      - "Cryptographic continuations for resumable multi-step workflows"
      - "Visual state machine designer (n8n-style with Operator integration)"
      - "Generator-based state machines for memory-efficient workflows"
      - "State Monad for pure functional state threading"
      - "Event sourcing integration: state derived from Operator events"
      - "Form-based mutations with idempotent operations"
      - "Progressive enhancement from HTML forms to distributed state"
  - current: "@sitebender/quartermaster"
    studio_name: "Quartermaster"
    purpose: "Voice-guided application generator with collaborative blueprint editing and visual workflow design"
    status: "alpha (spec + stubs)"
    features:
      - "Voice-first interface for conversational app generation"
      - "HTTPS dev server with mkcert integration (production-quality from day one)"
      - "Real-time collaborative blueprint editing (via Agent CRDTs)"
      - "Visual configuration wizard (web-based, works in any browser)"
      - "Sketch-to-app: upload wireframes, generate working applications"
      - "18+ blueprint templates (minimal, blog, dashboard, e-commerce, etc.)"
      - "Time-travel configuration history (every decision tracked)"
      - "Blueprint marketplace with cryptographic signing"
      - "Import map generation and Warden/Steward pre-wired"
      - "Math constant ports (31415=π, 27182=e, 16180=φ)"
  - current: "@sitebender/sentinel"
    studio_name: "Sentinel"
    purpose: "Authentication, authorization, and security policies as declarative JSX"
    status: "planning phase"
    features:
      - "OAuth2, WebAuthn, DID authentication providers"
      - "Role-based and attribute-based access control"
      - "Security policies as data in triple store"
      - "Test authentication credentials for testing (declarative test data, not mocks)"

applications:
  - path: "/applications/mission-control"
    studio_name: "mission-control"
    description: "Envoy-generated docs; live examples; structured data visible"
  - path: "/applications/the-workshop"
    studio_name: "the-workshop"
    description: "Interactive sandbox JSX -> IR -> formats -> DB -> HTML; real-time visualization"
  - path: "/applications/the-agency"
    studio_name: "the-agency"
    description: "Experimental IPFS/Solid/RDF/blockchain; orchestrated by Agent"

roadmap_priorities:
  - order: 1
    item: "Warden"
    policy: "warn in PRs, block on main; make foolproof; stop AI-induced drift"
  - order: 2
    item: "Steward"
    policy: "introduce deterministic style/shape enforcement; reduce governance noise; wire CI (PR warn, main block)"
  - order: 3
    item: "Toolsmith"
    policy: "complete lifted functions; clean comments; enforce style; lock down"
  - order: 4
    item: "Parallel independents"
    includes:
      [
        "Quarrier",
        "Arborist (deno_ast-based parser)",
        "Formulator",
        "Operator (event-driven pub/sub)",
        "Agent (with IO interception)",
        "Quartermaster (App Generator)",
        "Sentinel (Auth/AuthZ)",
      ]
  - order: 5
    item: "Dependent pair"
    includes: ["Auditor", "Envoy"]
  - order: 6
    item: "Arborist Semantic Analysis"
    policy: "Required future work: add semantic analysis pass for type information"
    includes:
      - "Optional invocation, not default path"
      - "Enriches syntax data with resolved types"
      - "Enables type inference and symbol resolution"
      - "Does not affect fast syntax-only parsing"
  - order: 7
    item: "Declarative Testing Integration"
    includes:
      - "Agent: IO edge interception runtime (MSW-style)"
      - "Architect: Test response generation"
      - "Auditor: Contract verification"
      - "Custodian: Scenario state machines"
      - "All: Coordinate through TestHarness"
    note: "Each library adds testing features in parallel. NO MOCKING - real implementations with declarative test data only."
  - order: 8
    item: "Pagewright & Architect"
    note: "Already far along; continue active development"
  - order: 9
    item: "Monorepo wiring & cleanup"
    includes:
      ["import maps", "pure ESM delivery", "remove stale/confusing docs"]

release_and_versioning:
  strategy: "semver_by_package"
  local_iteration: "apps dogfood local libs via import maps (no publish needed)"
  publish_targets: "TBD"

testing_and_docs:
  docs:
    generator: "Envoy"
    navigation: "HATEOAS"
  tests:
    generator: "Auditor (aspirational 100% coverage)"
    property_testing_helpers: "Quarrier"
    co_located_tests: "index.test.ts near functions (as per Warden docs)"

acceptance_criteria_alpha:
  warden: "enforced; pass on main"
  steward: "steward:check passes repo-wide; ≥90% safe autofix coverage on targeted rules; ≤ ~3s typical"
  quartermaster: "generates mission-control and the-workshop skeletons (Pagewright-only and +Architect); import maps correct; Warden enforce passes; axe warn wired"
  axe: "warn-only"
  the-workshop: "renders JSON-defined example without JS assumptions"
  mission_control_app: "serves Envoy-generated docs for key APIs"
  performance: "validation ~< 5s repo-wide"

acceptance_criteria_production:
  warden: "block violations in CI and locally"
  axe: "hard-fail with documented allowlists"
  privacy: "no private boundary violations; no escape hatches"
  imports: "no barrel files; direct tree imports; aliases allowed only as explicit function synonyms"
  docs: "Envoy docs up-to-date with code; navigable HATEOAS graph"
  proofs_tests: "coverage gate meets target; auditor-generated tests stable"

implementation_details:
  - hydration_strategy_and_lifecycle_details
  - reactivity_model_specifics (signals/effects/scheduling/cleanup)
  - jsx_transform_pipeline (deno_ast integration, custom createElement/Fragment)
  - final_ir_v0_schema_and_serialization_rules
  - accessibility_allowlists_finalization_and_gate_transition
  - agent_mvp_scope (CRDT type, persistence, DID/VC, encryption model)
  - envoy_visual_workflow_dashboard_implementation
  - auditor_z3_integration_specifics
  - quarrier_bidirectional_generator_protocols

naming_map:
  toolsmith: "Toolsmith"
  pagewright: "Pagewright"
  architect: "Architect"
  formulator: "Formulator"
  agent: "Agent"
  envoy: "Envoy"
  auditor: "Auditor"
  arborist: "Arborist"
  quarrier: "Quarrier"
  warden: "Warden"
  steward: "Steward"
  quartermaster: "Quartermaster"

paths_of_interest:
  architect:
    buildDomTree: "libraries/architect/src/rendering/buildDomTree/index.ts"
    addCalculation: "libraries/architect/src/rendering/buildDomTree/addCalculation/index.ts"
    addFormatter: "libraries/architect/src/rendering/buildDomTree/addFormatter/index.ts"
    addValidation: "libraries/architect/src/rendering/buildDomTree/addValidation/index.ts"
    constants: "libraries/architect/src/rendering/constants.ts"
    embedIr: "libraries/architect/src/rendering/embedIr.ts"
    minimalSSR: "libraries/architect/src/rendering/index.ts"
  warden:
    readme: "libraries/warden/README.md"
    config: "libraries/warden/deno.jsonc"
    contract: "libraries/warden/contracts/warden.json (if present)"
  steward:
    readme: "libraries/steward/README.md"
    tasks_example: "libraries/steward/deno.jsonc (planned)"
  quartermaster:
    readme: "libraries/quartermaster/README.md (planned)"
    blueprints: "libraries/quartermaster/src/blueprints/ (planned)"
  docs:
    overview_md: "docs/studio-overview.md"
    overview_yaml: "docs/studio-overview.yaml"

decision_log:
  - id: "runtime-platform"
    decision: "Deno + TypeScript only; pure ESM; no bundling; no Node"
    rationale: "Modern runtime; leverages Deno tooling; avoid legacy/bloat"
  - id: "no-react-no-vdom"
    decision: "Plain JSX; direct DOM manipulation by Architect; no VDOM"
    rationale: "Eliminate overhead; simpler mental model; SSR/SSG-friendly"
  - id: "data-centric-truth"
    decision: "Triple store is the single source of truth"
    rationale: "Unified, strict validation via SHACL/OWL2; consistent data view"
  - id: "governance-strict"
    decision: "Warden enforces contracts, privacy, imports; no escape hatches"
    rationale: "AI-safe development; eliminate architectural drift"
  - id: "accessibility-gating"
    decision: "Axe warn until allowlists stabilize; hard-fail before production"
    rationale: "Pragmatic ramp-up without blocking early iteration"
  - id: "semver-by-package"
    decision: "Independent versioning per package"
    rationale: "Flexibility across libraries with different cadences"
  - id: "steward-pre-enforcement"
    decision: "Introduce Steward as deterministic style/shape autofixer before Warden"
    rationale: "Normalize code surface to reduce governance noise and simplify downstream tools"
  - id: "quartermaster-blueprints"
    decision: "Blueprint-driven app generator with import-map wiring"
    rationale: "Deterministic scaffolding, consistent CI tasks, easier GUI integration"

non_goals:
  - "Node compatibility (explicitly out-of-scope)"
  - "Bundling or VDOM abstractions"
  - "Relying on third-party runtime libraries for core behavior"
  - "Barrel files and blanket re-exports"

style_guide:
  functions:
    one_per_file: true
    named_only: true
    export_on_same_line: true
  folders:
    privacy_convention:
      public: "src/functionName/index.ts"
      private: "src/functionName/_helperName/index.ts"
      shared_private: "src/_sharedHelper/index.ts"
      no_generic_folders: true
  imports:
    direct_tree_imports_only: true
    barrels_forbidden: true
    examples:
      good: "import foo from '@sitebender/warden/enforce/index.ts'"
      bad: "import { enforce } from '@sitebender/warden/mod.ts'"
  typescript:
    strict_types_preferred: true
    curried_functions_preferred: true
    no_ambient_any: true

import_maps:
  policy: "Use import maps for stable aliases. Dev: alias @sitebender/* to local library src. Prod: import published library paths."
  example: |
    {
      "imports": {
        "@sitebender/toolsmith/": "./libraries/toolsmith/src/",
        "@sitebender/architect/": "./libraries/architect/src/"
      }
    }

ci_policies:
  warden:
    pr: "warn"
    main: "block"
  steward:
    pr: "warn"
    main: "block"
  axe:
    pr: "warn"
    main: "block before production"
  coverage:
    gate_script: "libraries/architect/deno.jsonc -> tasks.coverage-gate (example)"
    target: "TBD per lib; auditor aims to remove hand-written tests where feasible"

repo_structure:
  top_level_dirs:
    - "applications/"
    - "extensions/"
    - "libraries/"
    - "docs/"
    - "scripts/"
    - "tools/"
    - "tests/"
    - "contracts/"
    - "rules/"
    - "infrastructure/"
    - "ops/"
  notes:
    - "Apps dogfood libraries"
    - "Docs are generated via Envoy and hand-authored where needed"
    - "Contracts (warden) live under libraries/*/contracts or repo-level contracts/"

cross_library_dependencies:
  toolsmith/: []
  pagewright: ["toolsmith/"]
  architect: ["toolsmith/", "pagewright"]
  formulator: ["architect (IR spec)"]
  operator: ["toolsmith/"]
  agent: []
  envoy: ["arborist (CRITICAL: ALL AST data - Warden enforced)"]
  auditor:
    [
      "arborist (CRITICAL: ALL parsing operations), quarrier (ALL test data generation)",
    ]
  arborist: ["deno_ast (ONLY external dependency allowed in entire ecosystem)"]
  quarrier: ["arborist (type information only)"]
  warden: ["everyone depends on Warden for governance"]
  steward: ["arborist"]
  quartermaster: ["toolsmith/", "warden"]

architectural_boundaries:
  parsing_centralization: "Arborist provides all TypeScript/JSX parsing. Other libraries consume Arborist's structured outputs."
  warden_enforcement: "Violations of parsing boundaries are cryptographically prevented by Warden contracts"
  integration_patterns:
    arborist_hub: "Arborist is the central hub - all libraries get AST data from it"
    test_data_flow: "Quarrier provides ALL test data to Auditor"
    verification_chain: "Arborist → Auditor → Formal Verification → Proof Certificates"

do_not_list:
  - "Do not add Node-only APIs or polyfills"
  - "Do not introduce bundlers or VDOM layers"
  - "Do not create barrel files (mod.ts as index is forbidden)"
  - "Do not bypass underscore privacy; no friend modules"
  - "Do not add external runtime deps (testing/server OK where justified)"
  - "Do not persist or expose the IR externally (workshop exception only)"
  - "Use Arborist's structured outputs for all AST operations"

planning_protocol:
  - "Operate at high level first; defer low-level RFCs until requested"
  - "Read existing code (architect/pagewright) before asking what's already implemented"
  - "Prefer rolling our own over 3rd-party deps when feasible"
  - "Keep AIs on-rails by extending Warden contracts before expanding surface area"

ai_guardrails:
  intent: "Warden constrains AI behavior to architectural rules"
  checks:
    - "No barrel imports"
    - "No private imports across underscore boundaries"
    - "One-function-per-file naming enforced"
    - "Contracts hashed; changes require contract updates"
  failure_policy:
    pr: "warn"
    main: "block"
  messaging: "Clear, actionable errors; zero false positives target"

commands:
  deno_tasks_common:
    fmt: "deno task fmt"
    lint: "deno task lint"
    test: "deno task test"
  warden:
    enforce: "deno task enforce (see libraries/warden/deno.jsonc)"
  architect:
    test_cov: "deno task test:cov"
    coverage_gate: "deno task coverage-gate"
  steward:
    check: "deno task steward:check"
    fix: "deno task steward:fix"
  quartermaster:
    new: "deno task quartermaster:new --template <name> [--with architect] [--dry-run]"
    dry_run: "deno task quartermaster:dry-run --plan ./plan.json"

next_steps_shortlist:
  - "Make Warden foolproof repo-wide (warn PR, block main)"
  - "Introduce Steward and wire CI gates (PR warn, main block)"
  - "Complete and lock Toolsmith (lifted functions, comments, style)"
  - "Start monorepo wiring and docs cleanup to avoid confusing AIs"
  - "Run parallel efforts on Quarrier, Arborist, Formulator, Agent, Quartermaster"
  - "When ready, bring up Auditor and Envoy leveraging the above"

system_capabilities:
  visual_development:
    concept: "Development as visual workflow management"
    implementation:
      - "n8n-style workflow canvas for library interactions"
      - "Real-time collaboration on workflow visualizations"
      - "SPARQL-powered visual queries"
      - "Workflow configurations as RDF triples"
    envoy_dashboard: "Complete visual command center for development environment"

  computation_marketplace:
    concept: "Behaviors are data (JSON/YAML/Turtle) that can be traded/shared/verified cryptographically"
    implementation:
      - "Each computation as a content-addressed IPFS object"
      - "Cryptographic proofs of correctness via Auditor"
      - "Semantic descriptions via SHACL/OWL2"
      - "Automatic compatibility checking"
      - "Usage tracking and micropayments"
    documentation: "See docs/computation-marketplace.md for details"

  formal_verification:
    tool: "Z3 Theorem Prover integration via Auditor"
    approach:
      - "IR as formal specification language"
      - "Pure functions enable SMT solving"
      - "Proves correctness properties for ALL inputs, not just test cases"
      - "Generates exact counterexamples for failures"
      - "Verifies entire applications mathematically"
      - "Machine-checkable proof certificates"
    philosophy: "We don't test code. We prove it correct."
    documentation: "See docs/z3-formal-verification.md for details"

  advanced_debugging:
    time_travel: "Perfect state reconstruction from immutable triple store"
    visual_debugging: "3D code flow and computation cascade visualization"
    collaborative: "Real-time shared debugging sessions"
    query_based: "SPARQL queries for debugging running applications"
    why_explanations: "Natural language explanations of complex behaviors"

  distributed_architecture:
    gun_inspired: "Pure functional version of GUN.js CRDT algorithm"
    sqlite_virtual_tables: "SQLite virtual tables for triple store over distributed SQLite (Cloudflare D1/Turso)"
    did_vc: "Every triple as a verifiable credential with DIDs"
    blockchain_witness: "Periodic anchoring of triple store hash to blockchain for immutable history"
    crdt_native: "Each triple is a CRDT for automatic conflict resolution"

  ai_enhancements:
    neural_search: "Triples embedded in vector space for semantic search"
    pattern_learning: "Learns common patterns from codebase evolution"
    auto_optimization: "Suggests optimizations based on usage patterns"
    intent_detection: "Converts natural language to formal specifications"

  developer_experience:
    capabilities_versioning: "Versions capabilities not IR structure"
    ast_extensibility: "Unknown nodes preserved but ignored (like browsers with unknown HTML)"
    bidirectional_transformers: "Lossless IR version migrations"
    embedded_compiler_version: "Stores Architect version in IR for perfect reproducibility"
