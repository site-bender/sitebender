{
  "metadata": {
    "phase": "2.3",
    "encoding_type": "query",
    "created": "2025-10-03T05:24:16Z",
    "description": "Query phrases (developer questions) that should retrieve each rule. Multiple query variations per rule to maximize retrieval success."
  },
  "constitutional_rules": [
    {
      "rule_id": "const-001-no-classes",
      "category": "constitutional",
      "severity": "blocking",
      "queries": [
        "How do I organize code without classes?",
        "What's the alternative to classes in TypeScript?",
        "Can I use classes in this codebase?",
        "How to structure code functionally?",
        "Why can't I use class keyword?",
        "How to create objects without classes?",
        "What replaces OOP classes here?",
        "How do I group related functions?",
        "Is object-oriented programming allowed?",
        "How to avoid using classes?"
      ],
      "keywords": ["classes", "OOP", "object-oriented", "code-organization", "modules"],
      "tags": ["code-organization", "functional-programming", "classes"]
    },
    {
      "rule_id": "const-002-no-mutations",
      "category": "constitutional",
      "severity": "blocking",
      "queries": [
        "How do I modify an object?",
        "Can I use let or var?",
        "How to update array values?",
        "Why can't I mutate data?",
        "How to change object properties?",
        "What's wrong with push and pop?",
        "How do I add items to an array?",
        "Can I reassign variables?",
        "How to update state immutably?",
        "Why must everything be const?"
      ],
      "keywords": ["mutation", "immutability", "const", "let", "var", "update"],
      "tags": ["immutability", "data-structures", "mutations"]
    },
    {
      "rule_id": "const-003-no-loops",
      "category": "constitutional",
      "severity": "blocking",
      "queries": [
        "How do I iterate over an array?",
        "Can I use for loops?",
        "What replaces while loops?",
        "How to loop through items?",
        "Why are loops forbidden?",
        "How do I process array elements?",
        "What's the alternative to for...of?",
        "How to iterate without loops?",
        "Can I use forEach?",
        "How to repeat operations?"
      ],
      "keywords": ["loops", "iteration", "for", "while", "forEach", "map", "filter"],
      "tags": ["iteration", "loops", "functional-programming"]
    },
    {
      "rule_id": "const-004-no-exceptions",
      "category": "constitutional",
      "severity": "blocking",
      "queries": [
        "How do I handle errors?",
        "Can I use try-catch?",
        "What replaces throw statements?",
        "How to deal with failures?",
        "Why can't I throw exceptions?",
        "How do I return errors?",
        "What's the alternative to exceptions?",
        "How to handle async errors?",
        "Can I catch errors?",
        "How to represent failures?"
      ],
      "keywords": ["errors", "exceptions", "try-catch", "throw", "Result", "Validation"],
      "tags": ["error-handling", "exceptions", "Result"]
    }
  ],
  "functional_programming_rules": [
    {
      "rule_id": "fp-001-pure-functions",
      "category": "functional_programming",
      "severity": "blocking",
      "queries": [
        "What is a pure function?",
        "Can functions have side effects?",
        "How do I write pure functions?",
        "Why must functions be pure?",
        "Can I access global variables?",
        "How to avoid side effects?",
        "What makes a function impure?",
        "Can functions modify arguments?",
        "How to ensure referential transparency?",
        "What are side effects?"
      ],
      "keywords": ["pure", "side-effects", "referential-transparency", "deterministic"],
      "tags": ["purity", "functional-programming", "side-effects"]
    },
    {
      "rule_id": "fp-002-immutability",
      "category": "functional_programming",
      "severity": "blocking",
      "queries": [
        "How do I make data immutable?",
        "What is ReadonlyArray?",
        "How to use Readonly types?",
        "Why must data be immutable?",
        "How to update immutable objects?",
        "What's the spread operator for?",
        "How to work with readonly data?",
        "Can I modify function parameters?",
        "How to create modified copies?",
        "What are immutable data structures?"
      ],
      "keywords": ["immutable", "readonly", "ReadonlyArray", "Readonly", "const"],
      "tags": ["immutability", "type-safety", "readonly"]
    },
    {
      "rule_id": "fp-003-total-functions",
      "category": "functional_programming",
      "severity": "warning",
      "queries": [
        "What is a total function?",
        "How to handle undefined values?",
        "What is Maybe type?",
        "When to use Result vs Validation?",
        "How to avoid returning null?",
        "What's the difference between Result and Validation?",
        "How to handle optional values?",
        "Can functions return undefined?",
        "How to make functions total?",
        "What are partial functions?"
      ],
      "keywords": ["total", "partial", "Maybe", "Result", "Validation", "undefined", "null"],
      "tags": ["totality", "type-safety", "Maybe", "Result"]
    },
    {
      "rule_id": "fp-004-function-composition",
      "category": "functional_programming",
      "severity": "advisory",
      "queries": [
        "How do I compose functions?",
        "What is pipe?",
        "What is compose?",
        "How to chain functions?",
        "How to build complex from simple?",
        "What's function composition?",
        "How to use pipe operator?",
        "What's the difference between pipe and compose?",
        "How to combine functions?",
        "What is point-free style?"
      ],
      "keywords": ["composition", "pipe", "compose", "chain", "point-free"],
      "tags": ["composition", "functional-programming", "pipe"]
    },
    {
      "rule_id": "fp-005-higher-order-functions",
      "category": "functional_programming",
      "severity": "advisory",
      "queries": [
        "What are higher-order functions?",
        "Can functions take functions as parameters?",
        "Can functions return functions?",
        "How to use map and filter?",
        "What is currying?",
        "How to create function factories?",
        "What are HOFs?",
        "How to pass functions as arguments?",
        "What is partial application?",
        "How to use reduce?"
      ],
      "keywords": ["higher-order", "HOF", "map", "filter", "reduce", "curry"],
      "tags": ["higher-order-functions", "functional-programming", "HOF"]
    }
  ],
  "syntax_rules": [
    {
      "rule_id": "syntax-001-no-arrow-functions",
      "category": "syntax",
      "severity": "blocking",
      "queries": [
        "Can I use arrow functions?",
        "Why no arrow functions?",
        "How to write functions?",
        "What's wrong with () =>?",
        "How to declare functions?",
        "Can I use lambda syntax?",
        "What replaces arrow functions?",
        "How to write callbacks?",
        "Why must I use function keyword?",
        "How to name anonymous functions?"
      ],
      "keywords": ["arrow", "=>", "lambda", "function", "declaration"],
      "tags": ["syntax", "arrow-functions", "naming"]
    },
    {
      "rule_id": "syntax-002-no-abbreviations",
      "category": "syntax",
      "severity": "warning",
      "queries": [
        "Can I abbreviate variable names?",
        "Why no abbreviations?",
        "How to name variables?",
        "What abbreviations are allowed?",
        "Can I use short names?",
        "Why write full words?",
        "What's the naming convention?",
        "Can I use calc instead of calculate?",
        "Are there any allowed abbreviations?",
        "How long should names be?"
      ],
      "keywords": ["abbreviations", "naming", "variables", "identifiers"],
      "tags": ["naming", "readability", "abbreviations"]
    },
    {
      "rule_id": "syntax-003-plain-english-names",
      "category": "syntax",
      "severity": "warning",
      "queries": [
        "How should I name things?",
        "What makes a good name?",
        "How to write readable names?",
        "Should names be descriptive?",
        "How to name functions clearly?",
        "What's plain English naming?",
        "How to make code self-documenting?",
        "Can I use clever names?",
        "How to express intent in names?",
        "What naming style to use?"
      ],
      "keywords": ["naming", "readability", "plain-english", "descriptive"],
      "tags": ["naming", "readability", "code-quality"]
    },
    {
      "rule_id": "syntax-004-curried-function-naming",
      "category": "syntax",
      "severity": "advisory",
      "queries": [
        "How to name curried functions?",
        "How to name inner functions?",
        "What's the currying naming convention?",
        "How to name closures?",
        "Should inner functions include parameter names?",
        "How to name partially applied functions?",
        "What's the pattern for curried names?",
        "How to show captured parameters in names?",
        "How to name function factories?",
        "What makes curried names clear?"
      ],
      "keywords": ["currying", "closure", "naming", "inner-function", "partial-application"],
      "tags": ["naming", "currying", "closures"]
    }
  ],
  "formatting_rules": [
    {
      "rule_id": "format-001-character-encoding",
      "category": "formatting",
      "severity": "blocking",
      "queries": [
        "What character encoding to use?",
        "Should I use UTF-8?",
        "What about BOM?",
        "How to set file encoding?",
        "What encoding is required?",
        "Can I use other encodings?",
        "Why UTF-8?",
        "How to configure encoding?",
        "What's the standard encoding?",
        "Should files have BOM?"
      ],
      "keywords": ["encoding", "UTF-8", "BOM", "charset"],
      "tags": ["formatting", "encoding", "UTF-8"]
    },
    {
      "rule_id": "format-002-line-endings",
      "category": "formatting",
      "severity": "blocking",
      "queries": [
        "What line endings to use?",
        "Should I use LF or CRLF?",
        "What about Windows line endings?",
        "How to configure line endings?",
        "Why LF instead of CRLF?",
        "What's the line ending standard?",
        "How to fix line endings?",
        "Should I use Unix line endings?",
        "What about \\r\\n vs \\n?",
        "How to set EOL?"
      ],
      "keywords": ["line-endings", "LF", "CRLF", "EOL", "newline"],
      "tags": ["formatting", "line-endings", "LF"]
    },
    {
      "rule_id": "format-003-indentation",
      "category": "formatting",
      "severity": "blocking",
      "queries": [
        "Should I use tabs or spaces?",
        "What's the indentation style?",
        "How many spaces for indent?",
        "Can I use tabs?",
        "What about markdown indentation?",
        "How to indent YAML files?",
        "What's the tab width?",
        "Should TypeScript use tabs?",
        "How to configure indentation?",
        "What indent size?"
      ],
      "keywords": ["indentation", "tabs", "spaces", "indent"],
      "tags": ["formatting", "indentation", "tabs"]
    },
    {
      "rule_id": "format-004-line-length",
      "category": "formatting",
      "severity": "warning",
      "queries": [
        "How long can lines be?",
        "What's the line length limit?",
        "Should I wrap at 80 characters?",
        "Why 80 character limit?",
        "How to break long lines?",
        "What's the max line length?",
        "Can lines be longer than 80?",
        "How to handle long strings?",
        "Where to break lines?",
        "What about markdown line length?"
      ],
      "keywords": ["line-length", "80-characters", "wrapping", "max-length"],
      "tags": ["formatting", "line-length", "readability"]
    },
    {
      "rule_id": "format-005-final-newline",
      "category": "formatting",
      "severity": "warning",
      "queries": [
        "Should files end with newline?",
        "What about final newline?",
        "Why add newline at end?",
        "How to configure final newline?",
        "Should I insert final newline?",
        "What's EOF newline?",
        "Why does file need final newline?",
        "How to fix missing newline?",
        "What about last line?",
        "Should every file end with \\n?"
      ],
      "keywords": ["final-newline", "EOF", "newline", "end-of-file"],
      "tags": ["formatting", "newline", "EOF"]
    },
    {
      "rule_id": "format-006-trailing-whitespace",
      "category": "formatting",
      "severity": "warning",
      "queries": [
        "Should I trim trailing whitespace?",
        "What about spaces at end of line?",
        "How to handle trailing spaces?",
        "Why remove trailing whitespace?",
        "What about markdown trailing spaces?",
        "Should I trim whitespace?",
        "How to configure whitespace trimming?",
        "What's wrong with trailing spaces?",
        "Can I keep trailing whitespace?",
        "How to clean up whitespace?"
      ],
      "keywords": ["trailing-whitespace", "whitespace", "trim", "spaces"],
      "tags": ["formatting", "whitespace", "trailing"]
    }
  ],
  "typescript_rules": [
    {
      "rule_id": "ts-001-discriminated-unions",
      "category": "typescript",
      "severity": "blocking",
      "queries": [
        "How to create union types?",
        "What are discriminated unions?",
        "How to use tagged unions?",
        "What's the _tag field for?",
        "How to do pattern matching?",
        "How to handle variant types?",
        "What are ADTs in TypeScript?",
        "How to make exhaustive switches?",
        "What's a sum type?",
        "How to model Result type?"
      ],
      "keywords": ["discriminated-union", "tagged-union", "_tag", "ADT", "pattern-matching"],
      "tags": ["type-safety", "discriminated-unions", "ADT"]
    },
    {
      "rule_id": "ts-002-branded-types",
      "category": "typescript",
      "severity": "warning",
      "queries": [
        "What are branded types?",
        "How to create newtypes?",
        "What are phantom types?",
        "How to prevent mixing string types?",
        "What's nominal typing?",
        "How to brand primitives?",
        "What are smart constructors?",
        "How to validate at creation?",
        "What's unsafe constructor?",
        "How to unwrap branded types?"
      ],
      "keywords": ["branded-types", "newtype", "phantom-type", "nominal-typing"],
      "tags": ["type-safety", "branded-types", "validation"]
    },
    {
      "rule_id": "ts-003-explicit-annotations",
      "category": "typescript",
      "severity": "warning",
      "queries": [
        "Should I annotate types?",
        "Do I need explicit types?",
        "Can I rely on type inference?",
        "How to annotate function parameters?",
        "Should I specify return types?",
        "Why explicit type annotations?",
        "When to use type inference?",
        "How to type function signatures?",
        "Should public APIs have types?",
        "What about local variables?"
      ],
      "keywords": ["type-annotation", "explicit-types", "inference", "function-signature"],
      "tags": ["type-safety", "annotations", "documentation"]
    },
    {
      "rule_id": "ts-004-readonly-types",
      "category": "typescript",
      "severity": "blocking",
      "queries": [
        "How to make types readonly?",
        "What is ReadonlyArray?",
        "Should I use Readonly<T>?",
        "How to enforce immutability in types?",
        "What's readonly modifier?",
        "How to prevent mutations in types?",
        "Should arrays be readonly?",
        "How to type immutable data?",
        "What about readonly properties?",
        "How to use readonly in signatures?"
      ],
      "keywords": ["readonly", "ReadonlyArray", "Readonly", "immutability"],
      "tags": ["immutability", "type-safety", "readonly"]
    },
    {
      "rule_id": "ts-005-type-level-programming",
      "category": "typescript",
      "severity": "advisory",
      "queries": [
        "What are mapped types?",
        "How to use conditional types?",
        "What are template literal types?",
        "How to do type-level programming?",
        "What are utility types?",
        "How to create generic constraints?",
        "What's type-level computation?",
        "How to use infer keyword?",
        "What are advanced types?",
        "How to encode invariants in types?"
      ],
      "keywords": ["mapped-types", "conditional-types", "template-literals", "generics"],
      "tags": ["type-safety", "advanced-types", "type-level"]
    }
  ]
}
